<?php

namespace F3CMS;

/**
 * FCHelper 類別負責處理文件快取操作。
 * 它提供了保存、讀取、清除快取等功能，並支援快取的歷史記錄與壓縮。
 */
class FCHelper extends Reaction
{
    /**
     * @var int 是否啟用快取歷史記錄
     */
    public $ifHistory = 0;

    /**
     * @var string 快取的基礎目錄
     */
    private $base = 'cache';

    /**
     * 建構子，初始化快取目錄並設定操作類型。
     *
     * @param string $action 操作類型
     */
    public function __construct($action)
    {
        $this->base = f3()->get('abspath') . $this->base;

        if (!file_exists($this->base)) {
            mkdir($this->base, 0770, true);
        }

        $this->action = $action;
    }

    /**
     * 保存快取內容到指定的快取名稱。
     *
     * @param string $cacheName 快取名稱
     * @param string $content 快取內容
     * @return string 返回保存的快取內容
     */
    public function save($cacheName, $content)
    {
        $filename = $this->getFilename($cacheName);

        $content = self::minify($content) . PHP_EOL .
        '<!-- cache: ' . $cacheName . ' (generated at ' . date('y-m-d H:i:s') . ') DO NOT EDIT THIS FILE -->' . PHP_EOL . PHP_EOL;

        if ($this->ifHistory) {
            $bakname = $this->getBackupFilename();

            $this->writeFile($bakname, $content);

            $staff = f3()->get('SESSION.cs.name');

            $this->writeFile(
                $this->path . '/history.log',
                '|' . date('Y-m-d H:i:s') . PHP_EOL . '變動人：' . (($staff) ?: remote_ip()) . PHP_EOL . $bakname . PHP_EOL,
                'a+'
            );
        }

        $this->writeFile($filename, $content);

        return $content;
    }

    /**
     * 根據請求取得快取內容。
     *
     * @param object $f3 框架實例
     * @param array $args 請求參數
     * @return array 包含 HTML 的快取內容
     */
    public function do_get($f3, $args)
    {
        $req = parent::_getReq();
        extract($req, EXTR_SKIP);

        switch ($page) {
            case 'press':
                $this->action = 'press';
                break;
            default:
                $this->action = 'page';
                break;
        }

        $html = $this->get($this->action, 7200);

        return parent::_return(1, ['html' => $html]);
    }

    /**
     * 清除指定快取名稱的快取。
     *
     * @param string $cacheName 快取名稱
     * @param bool $useWildcard 是否使用通配符
     */
    public function flush($cacheName, $useWildcard)
    {
        if ($useWildcard) {
            $this->removeFiles('cache.' . $cacheName . '*.html');
        } else {
            $this->removeFiles('cache.' . $cacheName . '.html');
        }
    }

    /**
     * 清除所有快取。
     */
    public function flushAll()
    {
        $this->removeFiles('cache.*.html');
    }

    /**
     * 取得指定快取名稱的快取內容。
     *
     * @param string $cacheName 快取名稱
     * @param int $maxLifetime 最大存活時間（分鐘）
     * @return mixed 快取內容或 null
     */
    public function get($cacheName, $maxLifetime = 0)
    {
        $filename = $this->getFilename($cacheName);

        if (0 != $maxLifetime && $this->needRebuild($filename, $maxLifetime)) {
            return null;
            // return $this->requestSet($cacheName);
        }

        // load cache
        try {
            return $this->readCache($cacheName, $filename);
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * 取得快取的歷史記錄。
     *
     * @param string $cacheName 快取名稱
     * @return array 快取歷史記錄
     */
    public function getLog($cacheName)
    {
        $filename = $this->getFilename($cacheName);
        $content  = @file_get_contents($this->base . $this->path . '/history.log');

        if (false !== $content) {
            $rtn = preg_split("/\|/u", $content);

            return array_filter(array_map('trim', $rtn));
        } else {
            return '';
        }
    }

    /**
     * 發送請求並設置快取。
     *
     * @param string $cacheName 快取名稱
     * @return mixed 請求結果
     */
    public function requestSet($cacheName)
    {
        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL            => f3()->get('uri') . '/' . $this->action,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => false,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 30,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
            CURLOPT_HTTPHEADER     => [
                'cache-control: no-cache',
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);

        curl_close($curl);

        if ($err) {
            return 'cURL Error #:' . $err;
        } else {
            return $this->set($this->action, $response, 60);
        }
    }

    /**
     * 寫入文件內容。
     *
     * @param string $path 文件路徑
     * @param string $content 文件內容
     * @param string $mode 文件開啟模式
     */
    private function writeFile($path, $content, $mode = 'w+')
    {
        if (!file_exists($this->base . $path)) {
            touch($this->base . $path);
        }

        $handler = fopen($this->base . $path, $mode);
        fwrite($handler, $content);
        fclose($handler);
    }

    /**
     * 取得快取文件的路徑。
     *
     * @param string $cacheName 快取名稱
     * @return string 快取文件路徑
     */
    protected function getFilename($cacheName)
    {
        $this->path = '/' . $this->action . '/' . md5($cacheName);

        if (!file_exists($this->base . $this->path)) {
            mkdir($this->base . $this->path, 0770, true);
        }

        return $this->path . '/index.html';
    }

    /**
     * 取得備份快取文件的路徑。
     *
     * @return string 備份文件路徑
     */
    protected function getBackupFilename()
    {
        return $this->path . '/' . date('ymdHis') . '.html';
    }

    /**
     * 移除符合指定模式的文件。
     *
     * @param string $pattern 文件匹配模式
     */
    protected function removeFiles($pattern)
    {
        $directory = $this->base . '/' . $this->action . '/';

        foreach (glob($directory . $pattern) as $filename) {
            @unlink($filename);
        }
    }

    /**
     * 判斷快取是否需要重建。
     *
     * @param string $filename 快取文件名稱
     * @param int $maxLifetime 最大存活時間（分鐘）
     * @return bool 是否需要重建
     */
    protected function needRebuild($filename, $maxLifetime)
    {
        // cache does not exist
        if (!file_exists($this->base . $filename)) {
            return true;
        }

        // cache is empty
        if (!@filesize($this->base . $filename)) {
            return true;
        }

        // cache resource was marked as obsolete
        if (($mtime = filemtime($this->base . $filename)) <= 1) {
            return true;
        }

        // maxlifetime expired
        if ($maxLifetime > 0 && (time() - $mtime) > $maxLifetime * 60) {
            return true;
        }

        // do not rebuild cache
        return false;
    }

    /**
     * 讀取快取文件內容。
     *
     * @param string $cacheName 快取名稱
     * @param string $filename 快取文件名稱
     * @return mixed 快取內容
     */
    protected function readCache($cacheName, $filename)
    {
        if (!file_exists($this->base . $filename)) {
            return '';
        }

        // get file contents
        $content = file_get_contents($this->base . $filename);

        // find first newline
        $position = strpos($content, PHP_EOL);
        if (false === $position) {
            throw new \Exception('Unable to load cache resource "' . $cacheName . '"');
        }

        // cut contents
        $contents = substr($contents, $position + 1);

        return $content;
    }

    /**
     * 讀取歷史記錄文件內容。
     *
     * @param string $filename 文件名稱
     * @return mixed 文件內容
     */
    public function readHistory($filename)
    {
        // get file contents
        $content = file_get_contents($this->base . $filename);

        // find first newline
        $position = strpos($content, PHP_EOL);
        if (false === $position) {
            throw new \Exception('Unable to load cache resource "' . $filename . '"');
        }

        return $content;
    }

    /**
     * 壓縮內容以減少空白字符。
     *
     * @param string $buffer 要壓縮的內容
     * @return string 壓縮後的內容
     */
    public static function minify($buffer)
    {
        //return $buffer;

        $search = [
            '/\>[^\S ]+/s', // strip whitespaces after tags, except space
            '/[^\S ]+\</s', // strip whitespaces before tags, except space
            '/(\s)+/s', // shorten multiple whitespace sequences
        ];

        $replace = [
            '>',
            '<',
            '\\1',
        ];

        $buffer = preg_replace($search, $replace, $buffer);

        return $buffer;
    }
}
