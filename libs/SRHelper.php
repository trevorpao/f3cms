<?php

namespace F3CMS;

/**
 * SRHelper 類別負責靜態檔案的處理，
 * 包括快取生成、讀取、清除與壓縮等功能。
 */
class SRHelper extends Helper
{
    const NOT_LOG_HISTORY = false;

    /**
     * 儲存靜態檔案。
     *
     * @param string $staticPath 靜態檔案路徑
     * @param string $content 檔案內容
     * @param bool $follow 是否記錄歷史（預設為 true）
     * @return string 儲存的檔案內容
     */
    public static function save($staticPath, $content, $follow = true)
    {
        $filename = self::getFilename($staticPath);

        $content = self::minify($content) . PHP_EOL .
        '<!-- cache: ' . $staticPath . ' (generated at ' . date('y-m-d H:i:s') . ') DO NOT EDIT THIS FILE -->' . PHP_EOL . PHP_EOL;

        if ($follow) {
            $bakname = self::getBackupFilename($staticPath);

            FSHelper::dumpFile(f3()->get('UPLOAD_PATH') . $bakname, $content);

            $staff = rStaff::_CStaff('name');

            FSHelper::appendToFile(
                f3()->get('UPLOAD_PATH') . $staticPath . '/history.log',
                '|' . date('Y-m-d H:i:s') . PHP_EOL . '變動人：' . (($staff) ?: f3()->IP) . PHP_EOL . $bakname . PHP_EOL
            );
        }

        FSHelper::dumpFile(f3()->get('UPLOAD_PATH') . $filename, $content);

        return $content;
    }

    /**
     * 清除指定靜態檔案。
     *
     * @param string $staticPath 靜態檔案路徑
     * @param bool $useWildcard 是否使用萬用字元
     */
    public static function flush($staticPath, $useWildcard)
    {
        if ($useWildcard) {
            self::removeFiles('cache.' . $staticPath . '*.html');
        } else {
            self::removeFiles('cache.' . $staticPath . '.html');
        }
    }

    /**
     * 清除所有靜態檔案。
     */
    public static function flushAll()
    {
        self::removeFiles('cache.*.html');
    }

    /**
     * 讀取靜態檔案內容。
     *
     * @param string $staticPath 靜態檔案路徑
     * @param int $maxLifetime 最大生命週期（分鐘，預設為 0）
     * @return string|null 檔案內容或 null
     */
    public static function get($staticPath, $maxLifetime = 0)
    {
        $filename = self::getFilename($staticPath);

        if (0 != $maxLifetime && self::needRebuild($filename, $maxLifetime)) {
            return null;
            // return self::requestSet($staticPath);
        }

        // load cache
        try {
            return self::readCache($staticPath, $filename);
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * 取得靜態檔案的歷史記錄。
     *
     * @param string $staticPath 靜態檔案路徑
     * @return array 歷史記錄陣列
     */
    public static function getLog($staticPath)
    {
        $filename = self::getFilename($staticPath);
        $content  = @file_get_contents(f3()->get('UPLOAD_PATH') . self::path . '/history.log');

        if (false !== $content) {
            $rtn = preg_split("/\|/u", $content);

            return array_filter(array_map('trim', $rtn));
        } else {
            return '';
        }
    }

    /**
     * 發送請求並設定靜態檔案。
     *
     * @param string $staticPath 靜態檔案路徑
     * @return string 請求結果
     */
    public static function requestSet($staticPath)
    {
        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL            => f3()->get('uri') . '/' . self::action,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => false,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 30,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
            CURLOPT_HTTPHEADER     => [
                'cache-control: no-cache',
            ],
        ]);

        $response = curl_exec($curl);
        $err      = curl_error($curl);

        curl_close($curl);

        if ($err) {
            return 'cURL Error #:' . $err;
        } else {
            return self::set(self::action, $response, 60);
        }
    }

    /**
     * 壓縮檔案內容。
     *
     * @param string $buffer 檔案內容
     * @return string 壓縮後的內容
     */
    public static function minify($buffer)
    {
        // return $buffer;

        $search = [
            '/\>[^\S ]+/s', // strip whitespaces after tags, except space
            '/[^\S ]+\</s', // strip whitespaces before tags, except space
            '/(\s)+/s', // shorten multiple whitespace sequences
        ];

        $replace = [
            '>',
            '<',
            '\\1',
        ];

        $buffer = preg_replace($search, $replace, $buffer);

        return $buffer;
    }

    /**
     * 判斷是否需要重新生成快取。
     *
     * @param string $filename 檔案名稱
     * @param int $maxLifetime 最大生命週期（分鐘）
     * @return bool 是否需要重新生成
     */
    protected static function needRebuild($filename, $maxLifetime)
    {
        // cache does not exist
        if (!file_exists(f3()->get('UPLOAD_PATH') . $filename)) {
            return true;
        }

        // cache is empty
        if (!@filesize(f3()->get('UPLOAD_PATH') . $filename)) {
            return true;
        }

        // cache resource was marked as obsolete
        if (($mtime = filemtime(f3()->get('UPLOAD_PATH') . $filename)) <= 1) {
            return true;
        }

        // maxlifetime expired
        if ($maxLifetime > 0 && (time() - $mtime) > $maxLifetime * 60) {
            return true;
        }

        // do not rebuild cache
        return false;
    }

    /**
     * 讀取快取檔案內容。
     *
     * @param string $staticPath 靜態檔案路徑
     * @param string $filename 檔案名稱
     * @return string 檔案內容
     */
    protected static function readCache($staticPath, $filename)
    {
        if (!file_exists(f3()->get('UPLOAD_PATH') . $filename)) {
            return '';
        }

        // get file contents
        $content = FSHelper::openFile(f3()->get('UPLOAD_PATH') . $filename);

        // find first newline
        $position = strpos($content, PHP_EOL);
        if (false === $position) {
            throw new \Exception('Unable to load cache resource "' . $staticPath . '"');
        }

        // cut contents
        $contents = substr($contents, $position + 1);

        return $content;
    }

    /**
     * Loads the file of a cached resource.
     *
     * @param string $filename
     *
     * @return mixed
     */
    public static function readHistory($filename)
    {
        // get file contents
        $content = file_get_contents(f3()->get('UPLOAD_PATH') . $filename);

        // find first newline
        $position = strpos($content, PHP_EOL);
        if (false === $position) {
            throw new \Exception('Unable to load cache resource "' . $filename . '"');
        }

        return $content;
    }

    /**
     * Returns cache filename.
     *
     * @param string $staticPath
     *
     * @return string
     */
    protected static function getFilename($staticPath)
    {
        FSHelper::mkdir(f3()->get('UPLOAD_PATH') . $staticPath);

        return $staticPath . '/index.html';
    }

    /**
     * Returns cache filename.
     *
     * @return string
     */
    protected static function getBackupFilename($staticPath)
    {
        return $staticPath . '/' . date('ymdHis') . '.html';
    }

    /**
     * Removes index matching given path.
     *
     * @param string $path
     */
    protected static function removeFiles($path)
    {
        // TODO: lang ary
        $files = FSHelper::ls(f3()->get('UPLOAD_PATH') . $path);
        foreach ($files as $file) {
            if ('index.html' == basename($file)) {
                if (file_exists($file)) {
                    unlink($file);
                }
            }
        }
    }
}
